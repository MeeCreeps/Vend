// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api.proto
// Original file comments:
//
// Copyright (C) 2017 Dgraph Labs, Inc. and Contributors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Style guide for Protocol Buffer 3.
// Use CamelCase (with an initial capital) for message names – for example,
// SongServerRequest. Use underscore_separated_names for field names – for
// example, song_name.
//
#ifndef GRPC_api_2eproto__INCLUDED
#define GRPC_api_2eproto__INCLUDED

#include "api.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace api {

// Graph response.
class Dgraph final {
 public:
  static constexpr char const* service_full_name() {
    return "api.Dgraph";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Login(::grpc::ClientContext* context, const ::api::LoginRequest& request, ::api::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::Response>> AsyncLogin(::grpc::ClientContext* context, const ::api::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::Response>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::Response>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::api::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::Response>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    virtual ::grpc::Status Query(::grpc::ClientContext* context, const ::api::Request& request, ::api::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::Response>> AsyncQuery(::grpc::ClientContext* context, const ::api::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::Response>>(AsyncQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::Response>> PrepareAsyncQuery(::grpc::ClientContext* context, const ::api::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::Response>>(PrepareAsyncQueryRaw(context, request, cq));
    }
    virtual ::grpc::Status Alter(::grpc::ClientContext* context, const ::api::Operation& request, ::api::Payload* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::Payload>> AsyncAlter(::grpc::ClientContext* context, const ::api::Operation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::Payload>>(AsyncAlterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::Payload>> PrepareAsyncAlter(::grpc::ClientContext* context, const ::api::Operation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::Payload>>(PrepareAsyncAlterRaw(context, request, cq));
    }
    virtual ::grpc::Status CommitOrAbort(::grpc::ClientContext* context, const ::api::TxnContext& request, ::api::TxnContext* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::TxnContext>> AsyncCommitOrAbort(::grpc::ClientContext* context, const ::api::TxnContext& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::TxnContext>>(AsyncCommitOrAbortRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::TxnContext>> PrepareAsyncCommitOrAbort(::grpc::ClientContext* context, const ::api::TxnContext& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::TxnContext>>(PrepareAsyncCommitOrAbortRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckVersion(::grpc::ClientContext* context, const ::api::Check& request, ::api::Version* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::Version>> AsyncCheckVersion(::grpc::ClientContext* context, const ::api::Check& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::Version>>(AsyncCheckVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::Version>> PrepareAsyncCheckVersion(::grpc::ClientContext* context, const ::api::Check& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::Version>>(PrepareAsyncCheckVersionRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Login(::grpc::ClientContext* context, const ::api::LoginRequest* request, ::api::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::api::LoginRequest* request, ::api::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Query(::grpc::ClientContext* context, const ::api::Request* request, ::api::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Query(::grpc::ClientContext* context, const ::api::Request* request, ::api::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Alter(::grpc::ClientContext* context, const ::api::Operation* request, ::api::Payload* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Alter(::grpc::ClientContext* context, const ::api::Operation* request, ::api::Payload* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CommitOrAbort(::grpc::ClientContext* context, const ::api::TxnContext* request, ::api::TxnContext* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CommitOrAbort(::grpc::ClientContext* context, const ::api::TxnContext* request, ::api::TxnContext* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CheckVersion(::grpc::ClientContext* context, const ::api::Check* request, ::api::Version* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckVersion(::grpc::ClientContext* context, const ::api::Check* request, ::api::Version* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::Response>* AsyncLoginRaw(::grpc::ClientContext* context, const ::api::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::Response>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::api::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::Response>* AsyncQueryRaw(::grpc::ClientContext* context, const ::api::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::Response>* PrepareAsyncQueryRaw(::grpc::ClientContext* context, const ::api::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::Payload>* AsyncAlterRaw(::grpc::ClientContext* context, const ::api::Operation& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::Payload>* PrepareAsyncAlterRaw(::grpc::ClientContext* context, const ::api::Operation& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::TxnContext>* AsyncCommitOrAbortRaw(::grpc::ClientContext* context, const ::api::TxnContext& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::TxnContext>* PrepareAsyncCommitOrAbortRaw(::grpc::ClientContext* context, const ::api::TxnContext& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::Version>* AsyncCheckVersionRaw(::grpc::ClientContext* context, const ::api::Check& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::Version>* PrepareAsyncCheckVersionRaw(::grpc::ClientContext* context, const ::api::Check& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Login(::grpc::ClientContext* context, const ::api::LoginRequest& request, ::api::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::Response>> AsyncLogin(::grpc::ClientContext* context, const ::api::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::Response>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::Response>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::api::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::Response>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    ::grpc::Status Query(::grpc::ClientContext* context, const ::api::Request& request, ::api::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::Response>> AsyncQuery(::grpc::ClientContext* context, const ::api::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::Response>>(AsyncQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::Response>> PrepareAsyncQuery(::grpc::ClientContext* context, const ::api::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::Response>>(PrepareAsyncQueryRaw(context, request, cq));
    }
    ::grpc::Status Alter(::grpc::ClientContext* context, const ::api::Operation& request, ::api::Payload* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::Payload>> AsyncAlter(::grpc::ClientContext* context, const ::api::Operation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::Payload>>(AsyncAlterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::Payload>> PrepareAsyncAlter(::grpc::ClientContext* context, const ::api::Operation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::Payload>>(PrepareAsyncAlterRaw(context, request, cq));
    }
    ::grpc::Status CommitOrAbort(::grpc::ClientContext* context, const ::api::TxnContext& request, ::api::TxnContext* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::TxnContext>> AsyncCommitOrAbort(::grpc::ClientContext* context, const ::api::TxnContext& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::TxnContext>>(AsyncCommitOrAbortRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::TxnContext>> PrepareAsyncCommitOrAbort(::grpc::ClientContext* context, const ::api::TxnContext& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::TxnContext>>(PrepareAsyncCommitOrAbortRaw(context, request, cq));
    }
    ::grpc::Status CheckVersion(::grpc::ClientContext* context, const ::api::Check& request, ::api::Version* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::Version>> AsyncCheckVersion(::grpc::ClientContext* context, const ::api::Check& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::Version>>(AsyncCheckVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::Version>> PrepareAsyncCheckVersion(::grpc::ClientContext* context, const ::api::Check& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::Version>>(PrepareAsyncCheckVersionRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Login(::grpc::ClientContext* context, const ::api::LoginRequest* request, ::api::Response* response, std::function<void(::grpc::Status)>) override;
      void Login(::grpc::ClientContext* context, const ::api::LoginRequest* request, ::api::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Query(::grpc::ClientContext* context, const ::api::Request* request, ::api::Response* response, std::function<void(::grpc::Status)>) override;
      void Query(::grpc::ClientContext* context, const ::api::Request* request, ::api::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Alter(::grpc::ClientContext* context, const ::api::Operation* request, ::api::Payload* response, std::function<void(::grpc::Status)>) override;
      void Alter(::grpc::ClientContext* context, const ::api::Operation* request, ::api::Payload* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CommitOrAbort(::grpc::ClientContext* context, const ::api::TxnContext* request, ::api::TxnContext* response, std::function<void(::grpc::Status)>) override;
      void CommitOrAbort(::grpc::ClientContext* context, const ::api::TxnContext* request, ::api::TxnContext* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CheckVersion(::grpc::ClientContext* context, const ::api::Check* request, ::api::Version* response, std::function<void(::grpc::Status)>) override;
      void CheckVersion(::grpc::ClientContext* context, const ::api::Check* request, ::api::Version* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::api::Response>* AsyncLoginRaw(::grpc::ClientContext* context, const ::api::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::Response>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::api::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::Response>* AsyncQueryRaw(::grpc::ClientContext* context, const ::api::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::Response>* PrepareAsyncQueryRaw(::grpc::ClientContext* context, const ::api::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::Payload>* AsyncAlterRaw(::grpc::ClientContext* context, const ::api::Operation& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::Payload>* PrepareAsyncAlterRaw(::grpc::ClientContext* context, const ::api::Operation& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::TxnContext>* AsyncCommitOrAbortRaw(::grpc::ClientContext* context, const ::api::TxnContext& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::TxnContext>* PrepareAsyncCommitOrAbortRaw(::grpc::ClientContext* context, const ::api::TxnContext& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::Version>* AsyncCheckVersionRaw(::grpc::ClientContext* context, const ::api::Check& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::Version>* PrepareAsyncCheckVersionRaw(::grpc::ClientContext* context, const ::api::Check& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Login_;
    const ::grpc::internal::RpcMethod rpcmethod_Query_;
    const ::grpc::internal::RpcMethod rpcmethod_Alter_;
    const ::grpc::internal::RpcMethod rpcmethod_CommitOrAbort_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckVersion_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Login(::grpc::ServerContext* context, const ::api::LoginRequest* request, ::api::Response* response);
    virtual ::grpc::Status Query(::grpc::ServerContext* context, const ::api::Request* request, ::api::Response* response);
    virtual ::grpc::Status Alter(::grpc::ServerContext* context, const ::api::Operation* request, ::api::Payload* response);
    virtual ::grpc::Status CommitOrAbort(::grpc::ServerContext* context, const ::api::TxnContext* request, ::api::TxnContext* response);
    virtual ::grpc::Status CheckVersion(::grpc::ServerContext* context, const ::api::Check* request, ::api::Version* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Login() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::api::LoginRequest* /*request*/, ::api::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::api::LoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::api::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Query() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::api::Request* /*request*/, ::api::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQuery(::grpc::ServerContext* context, ::api::Request* request, ::grpc::ServerAsyncResponseWriter< ::api::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Alter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Alter() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Alter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Alter(::grpc::ServerContext* /*context*/, const ::api::Operation* /*request*/, ::api::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAlter(::grpc::ServerContext* context, ::api::Operation* request, ::grpc::ServerAsyncResponseWriter< ::api::Payload>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CommitOrAbort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CommitOrAbort() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CommitOrAbort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CommitOrAbort(::grpc::ServerContext* /*context*/, const ::api::TxnContext* /*request*/, ::api::TxnContext* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCommitOrAbort(::grpc::ServerContext* context, ::api::TxnContext* request, ::grpc::ServerAsyncResponseWriter< ::api::TxnContext>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CheckVersion() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_CheckVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckVersion(::grpc::ServerContext* /*context*/, const ::api::Check* /*request*/, ::api::Version* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckVersion(::grpc::ServerContext* context, ::api::Check* request, ::grpc::ServerAsyncResponseWriter< ::api::Version>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Login<WithAsyncMethod_Query<WithAsyncMethod_Alter<WithAsyncMethod_CommitOrAbort<WithAsyncMethod_CheckVersion<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Login() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::api::LoginRequest, ::api::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::api::LoginRequest* request, ::api::Response* response) { return this->Login(context, request, response); }));}
    void SetMessageAllocatorFor_Login(
        ::grpc::MessageAllocator< ::api::LoginRequest, ::api::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::LoginRequest, ::api::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::api::LoginRequest* /*request*/, ::api::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::api::LoginRequest* /*request*/, ::api::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Query() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::api::Request, ::api::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::api::Request* request, ::api::Response* response) { return this->Query(context, request, response); }));}
    void SetMessageAllocatorFor_Query(
        ::grpc::MessageAllocator< ::api::Request, ::api::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::Request, ::api::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::api::Request* /*request*/, ::api::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Query(
      ::grpc::CallbackServerContext* /*context*/, const ::api::Request* /*request*/, ::api::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Alter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Alter() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::api::Operation, ::api::Payload>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::api::Operation* request, ::api::Payload* response) { return this->Alter(context, request, response); }));}
    void SetMessageAllocatorFor_Alter(
        ::grpc::MessageAllocator< ::api::Operation, ::api::Payload>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::Operation, ::api::Payload>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Alter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Alter(::grpc::ServerContext* /*context*/, const ::api::Operation* /*request*/, ::api::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Alter(
      ::grpc::CallbackServerContext* /*context*/, const ::api::Operation* /*request*/, ::api::Payload* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CommitOrAbort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CommitOrAbort() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::api::TxnContext, ::api::TxnContext>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::api::TxnContext* request, ::api::TxnContext* response) { return this->CommitOrAbort(context, request, response); }));}
    void SetMessageAllocatorFor_CommitOrAbort(
        ::grpc::MessageAllocator< ::api::TxnContext, ::api::TxnContext>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::TxnContext, ::api::TxnContext>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CommitOrAbort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CommitOrAbort(::grpc::ServerContext* /*context*/, const ::api::TxnContext* /*request*/, ::api::TxnContext* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CommitOrAbort(
      ::grpc::CallbackServerContext* /*context*/, const ::api::TxnContext* /*request*/, ::api::TxnContext* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CheckVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CheckVersion() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::api::Check, ::api::Version>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::api::Check* request, ::api::Version* response) { return this->CheckVersion(context, request, response); }));}
    void SetMessageAllocatorFor_CheckVersion(
        ::grpc::MessageAllocator< ::api::Check, ::api::Version>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::Check, ::api::Version>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CheckVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckVersion(::grpc::ServerContext* /*context*/, const ::api::Check* /*request*/, ::api::Version* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckVersion(
      ::grpc::CallbackServerContext* /*context*/, const ::api::Check* /*request*/, ::api::Version* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Login<WithCallbackMethod_Query<WithCallbackMethod_Alter<WithCallbackMethod_CommitOrAbort<WithCallbackMethod_CheckVersion<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Login() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::api::LoginRequest* /*request*/, ::api::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Query() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::api::Request* /*request*/, ::api::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Alter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Alter() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Alter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Alter(::grpc::ServerContext* /*context*/, const ::api::Operation* /*request*/, ::api::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CommitOrAbort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CommitOrAbort() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CommitOrAbort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CommitOrAbort(::grpc::ServerContext* /*context*/, const ::api::TxnContext* /*request*/, ::api::TxnContext* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CheckVersion() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_CheckVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckVersion(::grpc::ServerContext* /*context*/, const ::api::Check* /*request*/, ::api::Version* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Login() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::api::LoginRequest* /*request*/, ::api::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Query() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::api::Request* /*request*/, ::api::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQuery(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Alter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Alter() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Alter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Alter(::grpc::ServerContext* /*context*/, const ::api::Operation* /*request*/, ::api::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAlter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CommitOrAbort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CommitOrAbort() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CommitOrAbort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CommitOrAbort(::grpc::ServerContext* /*context*/, const ::api::TxnContext* /*request*/, ::api::TxnContext* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCommitOrAbort(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CheckVersion() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_CheckVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckVersion(::grpc::ServerContext* /*context*/, const ::api::Check* /*request*/, ::api::Version* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckVersion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Login() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Login(context, request, response); }));
    }
    ~WithRawCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::api::LoginRequest* /*request*/, ::api::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Query() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Query(context, request, response); }));
    }
    ~WithRawCallbackMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::api::Request* /*request*/, ::api::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Query(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Alter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Alter() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Alter(context, request, response); }));
    }
    ~WithRawCallbackMethod_Alter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Alter(::grpc::ServerContext* /*context*/, const ::api::Operation* /*request*/, ::api::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Alter(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CommitOrAbort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CommitOrAbort() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CommitOrAbort(context, request, response); }));
    }
    ~WithRawCallbackMethod_CommitOrAbort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CommitOrAbort(::grpc::ServerContext* /*context*/, const ::api::TxnContext* /*request*/, ::api::TxnContext* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CommitOrAbort(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CheckVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CheckVersion() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CheckVersion(context, request, response); }));
    }
    ~WithRawCallbackMethod_CheckVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckVersion(::grpc::ServerContext* /*context*/, const ::api::Check* /*request*/, ::api::Version* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckVersion(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Login() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::api::LoginRequest, ::api::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::api::LoginRequest, ::api::Response>* streamer) {
                       return this->StreamedLogin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::api::LoginRequest* /*request*/, ::api::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::LoginRequest,::api::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Query() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::api::Request, ::api::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::api::Request, ::api::Response>* streamer) {
                       return this->StreamedQuery(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::api::Request* /*request*/, ::api::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQuery(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::Request,::api::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Alter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Alter() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::api::Operation, ::api::Payload>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::api::Operation, ::api::Payload>* streamer) {
                       return this->StreamedAlter(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Alter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Alter(::grpc::ServerContext* /*context*/, const ::api::Operation* /*request*/, ::api::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAlter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::Operation,::api::Payload>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CommitOrAbort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CommitOrAbort() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::api::TxnContext, ::api::TxnContext>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::api::TxnContext, ::api::TxnContext>* streamer) {
                       return this->StreamedCommitOrAbort(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CommitOrAbort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CommitOrAbort(::grpc::ServerContext* /*context*/, const ::api::TxnContext* /*request*/, ::api::TxnContext* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCommitOrAbort(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::TxnContext,::api::TxnContext>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CheckVersion() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::api::Check, ::api::Version>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::api::Check, ::api::Version>* streamer) {
                       return this->StreamedCheckVersion(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CheckVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckVersion(::grpc::ServerContext* /*context*/, const ::api::Check* /*request*/, ::api::Version* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckVersion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::Check,::api::Version>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_Query<WithStreamedUnaryMethod_Alter<WithStreamedUnaryMethod_CommitOrAbort<WithStreamedUnaryMethod_CheckVersion<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_Query<WithStreamedUnaryMethod_Alter<WithStreamedUnaryMethod_CommitOrAbort<WithStreamedUnaryMethod_CheckVersion<Service > > > > > StreamedService;
};

}  // namespace api


#endif  // GRPC_api_2eproto__INCLUDED
